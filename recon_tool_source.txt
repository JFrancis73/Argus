import os
import subprocess
import requests
import concurrent.futures

temp_path = "/tmp/TBD/"

def sublist3r(domain, threads=1, output=temp_path+"subout.txt"):
    print("[-] Enumerating subdomains with Sublist3r...", end="\r", flush=True)
    cmd = ["sublist3r", "-d", domain, "-t", str(threads), "-o", output]
    result = subprocess.run(cmd, capture_output=True, text=True)
    if result.returncode == 0:
        print("[+] Subdomain enumeration completed."+" "*15)
        # print(result.stdout)
    else:
        print("[!] Error running Sublist3r:")
        print(result.stderr)
    return

def check_domain(domain, timeout=20):
    http_url = "http://" + domain
    https_url = "https://" + domain
    
    try:
        response = requests.get(https_url, timeout=timeout, allow_redirects=True)
        if 200 <= response.status_code < 400:
            return (domain, response.status_code, 'active')
        else:
            return (domain, response.status_code, 'inactive')
    except requests.RequestException:
        try:
            response = requests.get(http_url, timeout=timeout, allow_redirects=True)
            if 200 <= response.status_code < 400:
                return (domain, response.status_code, 'active')
            else:
                return (domain, response.status_code, 'inactive')
        except requests.RequestException:
            return (domain, "Exception", 'inactive')

def activeDomainIdentifier(path=temp_path + "subout.txt", timeout=20, max_workers=10):
    print("[-] Identifying active domains...", end="\r", flush=True)
    all_domains = []
    active_domains = []
    active_codes = []
    inactive_domains = []
    inactive_codes = []
    
    try:
        with open(path, 'r') as file:
            all_domains = [line.strip() for line in file.readlines()]
    except FileNotFoundError:
        print(f"[!] Could not find sublist3r output at {path}.")
        return
    except Exception as e:
        print(f"[!] An error occurred: {e}")
        return
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
        future_to_domain = {executor.submit(check_domain, domain, timeout): domain for domain in all_domains}
        for future in concurrent.futures.as_completed(future_to_domain):
            domain = future_to_domain[future]
            try:
                domain, code, status = future.result()
                if status == 'active':
                    active_domains.append(domain)
                    active_codes.append(code)
                else:
                    inactive_domains.append(domain)
                    inactive_codes.append(code)
            except Exception as e:
                inactive_domains.append(domain)
                inactive_codes.append(f"Exception: {e}")
    
    # Write active domains with codes to a file
    with open(temp_path + 'active_domains_with_codes.txt', 'w') as file:
        for domain, code in zip(active_domains, active_codes):
            file.write(f"{domain}\t{code}\n")
    
    # Write inactive domains with codes to a file
    with open(temp_path + 'inactive_domains_with_codes.txt', 'w') as file:
        for domain, code in zip(inactive_domains, inactive_codes):
            file.write(f"{domain}\t{code}\n")
    
    # Write active domains to a file
    with open(temp_path + 'active_domains.txt', 'w') as file:
        for domain in active_domains:
            file.write(f"{domain}\n")
    
    print("[+] Active domain identification complete.")
    # print(active_domains)
    return

def eyewitness():



sublist3r("manipal.edu", threads=100)
activeDomainIdentifier(max_workers=100)
